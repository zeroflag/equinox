( sequential tables )

[ ] size 0 =assert
[ 1 ] size 1 =assert

[ 3 5 7 "apple" [ 4 5 ] "banana" ] size 6 =assert

: make-table [ 99 7 [ 9 6 ] "orange" :grapes ] ;

make-table size 5 =assert
make-table 1 at 99 =assert
make-table 2 at 7 =assert
make-table 3 at 1 at 9 =assert
make-table 3 at 2 at 6 =assert
make-table 4 at "orange" =assert
make-table 5 at :grapes =assert

var tbl
[ 1 2 3 4 5 ] -> tbl
tbl size 5 =assert
tbl size 1 + 1 do tbl i at i =assert loop

tbl 1 0 table.insert!3

tbl 6 table.insert!2
tbl 7 at 6 =assert
tbl 1 at 0 =assert

[ "a" ] -> tbl
tbl 1 "b" table.insert!3 \ [ "b" "a" ]
tbl 1 at "b" =assert
tbl 2 at "a" =assert

tbl 2 "c" table.insert!3 \ [ "b" "c" "a" ]
tbl 1 at "b" =assert
tbl 2 at "c" =assert
tbl 3 at "a" =assert

tbl 2 table.remove/2 "c" =assert ( returns the removed item )

tbl 1 at "b" =assert
tbl 2 at "a" =assert
tbl size 2 =assert

depth 0 =assert
adepth 0 =assert

( key value tables )

{ } size 0 =assert

{ "k1" "val1"
  "k2" "val2" } -> tbl

tbl "k1" at "val1" =assert
tbl "k2" at "val2" =assert

tbl "k3" "val3" put
tbl "k3" at "val3" =assert

tbl "notfound" at nil =assert

tbl "k2" nil put \ remove k2
tbl "k2" at nil =assert \ k2 is removed
tbl "k3" at "val3" =assert \ k3 is still there

tbl size 0 =assert \ size doesn't work with non-seq tables

depth 0 =assert
adepth 0 =assert

\ test aliases
[ 1 2 ] -> tbl
tbl "a" append
tbl 3 at "a" =assert
tbl 1 at 1 =assert
tbl 2 at 2 =assert
tbl size 3 =assert

[ 1 2 ] -> tbl
tbl 2 "a" insert
tbl 2 at "a" =assert
tbl 1 at 1 =assert
tbl 3 at 2 =assert
tbl size 3 =assert

[ "x" "y" ] -> tbl
tbl 1 remove
tbl 1 at "y" =assert
tbl size 1 =assert
