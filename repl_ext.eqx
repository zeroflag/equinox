alias: rep  #( string.rep 2 )
alias: sub  #( string.sub 3 )
alias: gsub #( string.gsub 3 )

12 -> var width

:: line ( --  )
  " +"
  "-" width 2 + rep
  .. "+"
  .. . cr ;

:: trunc ( s -- s )
  dup size width > if
    1 width 2 - sub ".." ..
  then ;

:: padlen ( s -- n ) size width swap - ;
:: padding ( s -- s ) padlen " " swap rep ;
:: pad ( s -- s ) dup padding swap .. ;
:: .str "\"%s\"" swap #( string.format 2 ) . ;
:: sanitize (  s -- s )
   "\n" "\\n" gsub drop ( count ) ;

: clear depth 0 do drop loop ;
: table? type "table" = ;
: number? type "number" = ;

: seq? ( tbl -- bool )
  dup table? not if
    drop ( tbl )
    false exit
  then
  0 ( count )
  over ( tbl ) pairs: key val
    key number? not if
      drop ( tbl ) drop ( count )
      false exit
    then
    1 +
  end
  swap ( tbl ) size = ;

: inspect ( obj -- ) recursive
  dup type
  case
    "string" of .str endof
    "number" of .    endof
    "table"  of
      dup seq? if
        "[" . ipairs: i elem elem inspect end "]" .
      else
        "{" . pairs: key val key inspect val inspect end "}" .
      then
    endof
    drop >str . ( default )
  endcase ;

: .s ( -- )
  depth 0 = if exit then
  line
  depth 0 do
    " |" .
    i pick >str sanitize trunc pad .
    "|" . cr
    line
  loop ;
