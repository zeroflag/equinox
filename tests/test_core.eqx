0 1 - -1 =assert
-10 1 + -9 =assert
-10 4 < assert-true
-10 -4 < assert-true
324 12 > assert-true
-24 -212 > assert-true
24 -2 > assert-true
1 1 - 0 =assert
-1 1 + 0 =assert

1 2 + 3 =assert
0 33 + 33 =assert
-2 -4 + -6 =assert
-21 4 + -17 =assert
145 -5 + 140 =assert
3.3 2.5 + 5.8 =assert

2 1 - 1 =assert
0 33 - -33 =assert
-2 -4 - 2 =assert
-21 4 - -25 =assert
145 -5 - 150 =assert
11.5 1.5 - 10 =assert

2 3 * 6 =assert
0 33 * 0 =assert
-2 -4 * 8 =assert
100 -3 * -300 =assert
2.5 4 * 10 =assert
2.5 2.5 * 6.25 =assert

10 2 / 5 =assert
2 10 / 0.2 =assert
-4 -2 / 2 =assert
6 -3 / -2 =assert
10 4 / 2.5 =assert
2.5 2.5 / 1 =assert

10 3 % 1 =assert
10 4 % 2 =assert
10 13 % 10 =assert
10 5 % 0 =assert

5 5 =assert
6 5 = assert-false
-6 -6 =assert
6 -6 = assert-false
nil nil = assert-true
nil "nil" = assert-false

5 5 != assert-false
6 5 != assert-true
-6 -6 != assert-false
6 -6 != assert-true
nil 6 != assert-true
nil nil != assert-false

5 5 < assert-false
6 5 < assert-false
-6 -6 < assert-false
6 -6 < assert-false
3 5 < assert-true
-1 5 < assert-true
-6 -2 < assert-true

5 5 > assert-false
6 5 > assert-true
-6 -6 > assert-false
6 -6 > assert-true
3 5 > assert-false
-1 5 > assert-false
-6 -2 > assert-false

5 5 <= assert-true
6 5 <= assert-false
-6 -6 <= assert-true
6 -6 <= assert-false
3 5 <= assert-true
-1 5 <= assert-true
-6 -2 <= assert-true

5 5 >= assert-true
6 5 >= assert-true
-6 -6 >= assert-true
6 -6 >= assert-true
3 5 >= assert-false
-1 5 >= assert-false
-6 -2 >= assert-false

false assert-false
true assert-true
true not not assert-true
false not not not assert-true

true true and assert-true
true false and assert-false
false true and assert-false
false false and assert-false

true true or assert-true
true false or assert-true
false true or assert-true
false false or assert-false

5 dup + 10 =assert
7 10 swap - 3 =assert

1 2 over - + 2 =assert
3 4 over
3 =assert
4 =assert
3 =assert

1 2 nip
2 =assert
depth 0 =assert

1 2 3 rot ( 2 3 1 )
1 =assert
3 =assert
2 =assert

1 2 3 -rot ( 3 1 2 )
2 =assert
1 =assert
3 =assert

1 2 tuck ( 2 1 2 )
2 =assert
1 =assert
2 =assert

1 2 2dup ( 1 2 1 2 )
2 =assert
1 =assert
2 =assert
1 =assert

1 2 < if 8 then 8 =assert
1 2 > if 8 else 4 then 4 =assert

2 10 begin 1 - swap 2 * swap dup 0 = until drop 2048 =assert

: tst 42 ; tst 42 =assert
: dbl dup + ; 3 dbl 6 =assert

\ 1 2 +
 \ 1 1 *
  \ 3 4 +
 3 2 +
\ this is a comment
5 =assert
depth 0 =assert

( 1 2 +
 1 1 *
 3 4 + )
 3 2 +
( this is a comment)
5 =assert
depth 0 =assert

var v1
var v2
10 -> v1
12 -> v2
v1 v2 +
22 =assert

var v1
var v2
10 -> v1 v1 -> v2
3 v2 + -> v2 ( 13 = v2 )
v1 v2 - ( 10 13 - )
-3 =assert

:xyz string.len/1 3 =assert

"asdf" string.len/1 4 =assert
"asdf jkle" string.len/1 9 =assert
"asdf jkle " string.len/1 10 =assert
" asdf jkle" string.len/1 10 =assert
" asdf jkle " string.len/1 11 =assert
"" string.len/1 0 =assert
" " string.len/1 1 =assert
"  " string.len/1 2 =assert
"  asdf  jkle  " string.len/1 14 =assert

" abc " " xyz " .. " abc  xyz " =assert

2 8 math.pow/2 256 =assert

502 1002 math.min/2 502 =assert
502 1002 math.max/2 1002 =assert

502 1002 math.min/2 502 =assert

1 2 >a 3 a> - - 0 =assert

: *2 2 * ; 10 *2 20 =assert
: /2 2 / ; 10 /2 5  =assert

0 5 1 do i + loop 10 =assert
0 11 1 do i + loop 55 =assert

0
8 2 do
  9 3 do
    i j + +
  loop
loop
360 =assert

42424242 10005 10000 do i loop
10004 =assert 10003 =assert 10002 =assert 10001 =assert 10000 =assert
42424242 =assert

var str
"abc" -> str
str:upper/0 "ABC" =assert
str:len/0 3 =assert
str:reverse/0 "cba" =assert

"2@4" -> str
"(%d)@%d" str:match/1
"2" =assert

"2@4@8" -> str
"(%d)@(%d)@(%d)" str:match/1

"8" =assert
"4" =assert
"2" =assert

str:len 5 =assert

adepth 0 =assert
depth 0 =assert

: factorial ( n -- n! )
  1 2 rot
  begin
    2dup <=
  while
    -rot tuck
    * swap
    1 + rot
  repeat
  drop drop ;

8 factorial 40320 =assert

adepth 0 =assert
depth 0 =assert
