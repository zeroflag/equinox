+ - * / % . cr = != > >= < <= swap over rot -rot nip drop dup 2dup tuck depth pick roll adepth not and or .. >a a> {} [] size @ ! words exit return if then else begin until while repeat again case of endof endcase do loop ipairs: pairs: iter: to: step: #( -> var global ( \ alias: : :: ; recursive exec ' $ (: block end see append insert remove >str >num need type max min pow # emit assert-true assert-false =assert [ ] { } 
