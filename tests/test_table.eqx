( sequential tables )

[ ] size 0 =assert
[ 1 ] size 1 =assert

[ 3 5 7 "apple" [ 4 5 ] "banana" ] size 6 =assert

: make-table [ 99 7 [ 9 6 ] "orange" $grapes ] ;

make-table size 5 =assert
make-table 1 @ 99 =assert
make-table 2 @ 7 =assert
make-table 3 @ 1 @ 9 =assert
make-table 3 @ 2 @ 6 =assert
make-table 4 @ "orange" =assert
make-table 5 @ $grapes =assert

var tbl
[ 1 2 3 4 5 ] -> tbl
tbl size 5 =assert
tbl size 1 + 1 do tbl i @ i =assert loop

tbl 1 0 insert

tbl 6 append
tbl 7 @ 6 =assert
tbl 1 @ 0 =assert

[ "a" ] -> tbl
tbl 1 "b" insert \ [ "b" "a" ]
tbl 1 @ "b" =assert
tbl 2 @ "a" =assert

tbl 2 "c" insert \ [ "b" "c" "a" ]
tbl 1 @ "b" =assert
tbl 2 @ "c" =assert
tbl 3 @ "a" =assert

tbl 2 #( table.remove 2 ) "c" =assert ( returns the removed item )

tbl 1 @ "b" =assert
tbl 2 @ "a" =assert
tbl size 2 =assert

\ overwrite @ index

[ "a" "b" ] -> tbl
tbl 1 @ "a" =assert
tbl 2 @ "b" =assert

tbl 1 "x" !
tbl 2 "y" !

tbl 1 @ "x" =assert
tbl 2 @ "y" =assert
tbl size 2 =assert

depth 0 =assert
adepth 0 =assert

( key value tables )

{ } size 0 =assert

{ "k1" "val1"
  "k2" "val2" } -> tbl

tbl "k1" @ "val1" =assert
tbl "k2" @ "val2" =assert

tbl "k3" "val3" !
tbl "k3" @ "val3" =assert

tbl "notfound" @ nil =assert

tbl "k2" nil ! \ remove k2
tbl "k2" @ nil =assert \ k2 is removed
tbl "k3" @ "val3" =assert \ k3 is still there

tbl size 0 =assert \ size doesn't work with non-seq tables

depth 0 =assert
adepth 0 =assert

\ test aliases
[ 1 2 ] -> tbl
tbl "a" append
tbl 3 @ "a" =assert
tbl 1 @ 1 =assert
tbl 2 @ 2 =assert
tbl size 3 =assert

[ 1 2 ] -> tbl
tbl 2 "a" insert
tbl 2 @ "a" =assert
tbl 1 @ 1 =assert
tbl 3 @ 2 =assert
tbl size 3 =assert

[ "x" "y" ] -> tbl
tbl 1 remove
tbl 1 @ "y" =assert
tbl size 1 =assert

\ key lookup with dot syntax
{ $k1 42 $k2 "apple" } -> tbl
tbl.k1 42 =assert
tbl.k2 "apple" =assert

\ assigment
15 -> tbl.k1
tbl.k1 15 =assert

"orange" -> tbl.k2
tbl.k2 "orange" =assert

{ $k1 { $k2 { $k3 { $k4 42 } } } } -> tbl
tbl.k1.k2.k3.k4 42 =assert

[ "x" "y" ] -> tbl
10 20 tbl 2 @ "y" =assert
20 =assert
10 =assert

30 40
tbl 2 "z" !
tbl 2 @ "z" =assert
40 =assert
30 =assert

"apple" -> var abc
"orange" -> var def

{ $ abc $ def } -> tbl

tbl $abc @ "apple" =assert
tbl.def "orange" =assert


depth 0 =assert
adepth 0 =assert
